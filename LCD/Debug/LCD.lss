
LCD.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001aa  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001e  00800060  000001aa  0000021e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000026c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000060  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000099c  00000000  00000000  00000308  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000724  00000000  00000000  00000ca4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000469  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000098  00000000  00000000  00001834  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037b  00000000  00000000  000018cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000231  00000000  00000000  00001c47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  00001e78  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea ea       	ldi	r30, 0xAA	; 170
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 37       	cpi	r26, 0x7E	; 126
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  7a:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <LCD_SendCommand>:
 }

 /***************************************LCD Send COMMAND****************************/
 void LCD_SendCommand(uint8_t cmd)
 {
	Clear_Bit(LCD_Ctrl_Out, RS);                  //RS FOR COMMAND
  82:	92 b3       	in	r25, 0x12	; 18
  84:	9f 7b       	andi	r25, 0xBF	; 191
  86:	92 bb       	out	0x12, r25	; 18
	
	//Send Upper nibble
     LCD = cmd & 0xF0;
  88:	98 2f       	mov	r25, r24
  8a:	90 7f       	andi	r25, 0xF0	; 240
  8c:	95 bb       	out	0x15, r25	; 21
	  //Enable Pulse
	 Set_Bit(LCD_Ctrl_Out, EN);
  8e:	92 b3       	in	r25, 0x12	; 18
  90:	90 61       	ori	r25, 0x10	; 16
  92:	92 bb       	out	0x12, r25	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  94:	e9 ef       	ldi	r30, 0xF9	; 249
  96:	f0 e0       	ldi	r31, 0x00	; 0
  98:	31 97       	sbiw	r30, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <LCD_SendCommand+0x16>
  9c:	00 c0       	rjmp	.+0      	; 0x9e <LCD_SendCommand+0x1c>
  9e:	00 00       	nop
	 _delay_ms(1);
	 Clear_Bit(LCD_Ctrl_Out, EN); 
  a0:	92 b3       	in	r25, 0x12	; 18
  a2:	9f 7e       	andi	r25, 0xEF	; 239
  a4:	92 bb       	out	0x12, r25	; 18

	//Send Lower nibble
     LCD = cmd << 4;
  a6:	82 95       	swap	r24
  a8:	80 7f       	andi	r24, 0xF0	; 240
  aa:	85 bb       	out	0x15, r24	; 21
      //Enable Pulse
	 Set_Bit(LCD_Ctrl_Out, EN);
  ac:	82 b3       	in	r24, 0x12	; 18
  ae:	80 61       	ori	r24, 0x10	; 16
  b0:	82 bb       	out	0x12, r24	; 18
  b2:	89 ef       	ldi	r24, 0xF9	; 249
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	01 97       	sbiw	r24, 0x01	; 1
  b8:	f1 f7       	brne	.-4      	; 0xb6 <LCD_SendCommand+0x34>
  ba:	00 c0       	rjmp	.+0      	; 0xbc <LCD_SendCommand+0x3a>
  bc:	00 00       	nop
	 _delay_ms(1);
	 Clear_Bit(LCD_Ctrl_Out, EN);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8f 7e       	andi	r24, 0xEF	; 239
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	08 95       	ret

000000c6 <LCD_Init>:
 #include "lcd.h"

/***************************************LCD INITIALIZATION****************************/
 void LCD_Init()
 {
	LCD_Data_Dir = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
	LCD_Ctrl_Dir = 0xFF;
  ca:	81 bb       	out	0x11, r24	; 17
	Clear_Bit(LCD_Ctrl_Out, EN);
  cc:	82 b3       	in	r24, 0x12	; 18
  ce:	8f 7e       	andi	r24, 0xEF	; 239
  d0:	82 bb       	out	0x12, r24	; 18

	LCD_SendCommand(0x33);
  d2:	83 e3       	ldi	r24, 0x33	; 51
  d4:	0e 94 41 00 	call	0x82	; 0x82 <LCD_SendCommand>
	LCD_SendCommand(0x32);
  d8:	82 e3       	ldi	r24, 0x32	; 50
  da:	0e 94 41 00 	call	0x82	; 0x82 <LCD_SendCommand>
	LCD_SendCommand(FOUR_Bit_Mode);
  de:	88 e2       	ldi	r24, 0x28	; 40
  e0:	0e 94 41 00 	call	0x82	; 0x82 <LCD_SendCommand>
	LCD_SendCommand(CURSOR_ON);
  e4:	8e e0       	ldi	r24, 0x0E	; 14
  e6:	0e 94 41 00 	call	0x82	; 0x82 <LCD_SendCommand>
	LCD_SendCommand(CLEAR_COMMAND);
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 41 00 	call	0x82	; 0x82 <LCD_SendCommand>
  f0:	83 ef       	ldi	r24, 0xF3	; 243
  f2:	91 e0       	ldi	r25, 0x01	; 1
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_Init+0x2e>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_Init+0x34>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <LCD_SendCharacter>:
 }

 /***************************************LCD Char send ****************************/
 void LCD_SendCharacter(uint8_t data)
 {
	 Set_Bit(LCD_Ctrl_Out,RS);
  fe:	92 b3       	in	r25, 0x12	; 18
 100:	90 64       	ori	r25, 0x40	; 64
 102:	92 bb       	out	0x12, r25	; 18
	 
	 //Send Upper nibble
	 LCD = data & 0xF0;
 104:	98 2f       	mov	r25, r24
 106:	90 7f       	andi	r25, 0xF0	; 240
 108:	95 bb       	out	0x15, r25	; 21
	  //Enable Pulse
	 Set_Bit(LCD_Ctrl_Out, EN);
 10a:	92 b3       	in	r25, 0x12	; 18
 10c:	90 61       	ori	r25, 0x10	; 16
 10e:	92 bb       	out	0x12, r25	; 18
 110:	e9 ef       	ldi	r30, 0xF9	; 249
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	31 97       	sbiw	r30, 0x01	; 1
 116:	f1 f7       	brne	.-4      	; 0x114 <LCD_SendCharacter+0x16>
 118:	00 c0       	rjmp	.+0      	; 0x11a <LCD_SendCharacter+0x1c>
 11a:	00 00       	nop
	 _delay_ms(1);
	 Clear_Bit(LCD_Ctrl_Out, EN);
 11c:	92 b3       	in	r25, 0x12	; 18
 11e:	9f 7e       	andi	r25, 0xEF	; 239
 120:	92 bb       	out	0x12, r25	; 18

	 //Send Lower nibble
	 LCD = data << 4;
 122:	82 95       	swap	r24
 124:	80 7f       	andi	r24, 0xF0	; 240
 126:	85 bb       	out	0x15, r24	; 21
	 //Enable Pulse
	 Set_Bit(LCD_Ctrl_Out, EN);
 128:	82 b3       	in	r24, 0x12	; 18
 12a:	80 61       	ori	r24, 0x10	; 16
 12c:	82 bb       	out	0x12, r24	; 18
 12e:	89 ef       	ldi	r24, 0xF9	; 249
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_SendCharacter+0x34>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_SendCharacter+0x3a>
 138:	00 00       	nop
	 _delay_ms(1);
	 Clear_Bit(LCD_Ctrl_Out, EN);
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	8f 7e       	andi	r24, 0xEF	; 239
 13e:	82 bb       	out	0x12, r24	; 18
 140:	08 95       	ret

00000142 <LCD_DisplayString>:
 }

 /***************************************LCD DISPLAY STRING ****************************/
 void LCD_DisplayString(uint8_t *str)
 {
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	8c 01       	movw	r16, r24
	uint8_t i = 0;
 14a:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i] != 0)
 14c:	03 c0       	rjmp	.+6      	; 0x154 <LCD_DisplayString+0x12>
	{
		LCD_SendCharacter(str[i]);
 14e:	0e 94 7f 00 	call	0xfe	; 0xfe <LCD_SendCharacter>
		i++;
 152:	cf 5f       	subi	r28, 0xFF	; 255

 /***************************************LCD DISPLAY STRING ****************************/
 void LCD_DisplayString(uint8_t *str)
 {
	uint8_t i = 0;
	while(str[i] != 0)
 154:	f8 01       	movw	r30, r16
 156:	ec 0f       	add	r30, r28
 158:	f1 1d       	adc	r31, r1
 15a:	80 81       	ld	r24, Z
 15c:	81 11       	cpse	r24, r1
 15e:	f7 cf       	rjmp	.-18     	; 0x14e <LCD_DisplayString+0xc>
	{
		LCD_SendCharacter(str[i]);
		i++;
	}
 }
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <main>:
#define F_CPU 16000000ul

int main(void)
{
	
	LCD_Init();
 168:	0e 94 63 00 	call	0xc6	; 0xc6 <LCD_Init>

	LCD_SendCommand(0xC0);
 16c:	80 ec       	ldi	r24, 0xC0	; 192
 16e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_SendCommand>
    LCD_DisplayString(" Amin Safout ALi, Welcome AVR");
 172:	80 e6       	ldi	r24, 0x60	; 96
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_DisplayString>
 17a:	2f e3       	ldi	r18, 0x3F	; 63
 17c:	8d e0       	ldi	r24, 0x0D	; 13
 17e:	93 e0       	ldi	r25, 0x03	; 3
 180:	21 50       	subi	r18, 0x01	; 1
 182:	80 40       	sbci	r24, 0x00	; 0
 184:	90 40       	sbci	r25, 0x00	; 0
 186:	e1 f7       	brne	.-8      	; 0x180 <main+0x18>
 188:	00 c0       	rjmp	.+0      	; 0x18a <main+0x22>
 18a:	00 00       	nop
	_delay_ms(1000);

    while (1)
	{
		LCD_SendCommand(0x1C);
 18c:	8c e1       	ldi	r24, 0x1C	; 28
 18e:	0e 94 41 00 	call	0x82	; 0x82 <LCD_SendCommand>
 192:	2f ed       	ldi	r18, 0xDF	; 223
 194:	83 e9       	ldi	r24, 0x93	; 147
 196:	94 e0       	ldi	r25, 0x04	; 4
 198:	21 50       	subi	r18, 0x01	; 1
 19a:	80 40       	sbci	r24, 0x00	; 0
 19c:	90 40       	sbci	r25, 0x00	; 0
 19e:	e1 f7       	brne	.-8      	; 0x198 <main+0x30>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <main+0x3a>
 1a2:	00 00       	nop
 1a4:	f3 cf       	rjmp	.-26     	; 0x18c <main+0x24>

000001a6 <_exit>:
 1a6:	f8 94       	cli

000001a8 <__stop_program>:
 1a8:	ff cf       	rjmp	.-2      	; 0x1a8 <__stop_program>
